var SnubWsClient=function(){"use strict";const e=new Blob(['const worker=function(){const e=[];let n=null,o=()=>{},s={};const t="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope,c="undefined"!=typeof SharedWorkerGlobalScope&&self instanceof SharedWorkerGlobalScope;return c?self.onconnect=function(n){const o=n.ports[0];e.push(o),o.onmessage=a,o.start(),r(["_internal:connected"])}:t&&(self.onmessage=a,r(["_internal:connected"])),{postToMain:e=>o=e,handleIncomingMessage:a,ready(){r(["_internal:connected"])}};function r(n){n=JSON.stringify(n),c?e.forEach((e=>e.postMessage(n))):t?self.postMessage(n):o({data:n})}function a(e){const[o,t]=JSON.parse(e.data);"_config"===o&&(s={...s,...t}),"_connect"===o&&async function(e){n&&(n.close(),await new Promise((e=>{n.onclose=()=>{e()}})));n=new WebSocket(s.url),n.onopen=()=>{n.send(JSON.stringify(["_auth",e]))},n.onmessage=e=>{const[n,o]=JSON.parse(e.data);return r("_acceptAuth"===n?["_internal:socket-connect",o]:[n,o])},n.onclose=e=>{console.log(e),r(["_internal:socket-disconnected",{code:e.code,reason:e.reason}]),n=null},n.onerror=e=>{console.error("Snub-Ws-Socket => Socket error:",e)}}(t),"_close"===o&&n&&n.close(...t),"_send"===o&&n&&n.send(JSON.stringify(t))}}("undefined"!=typeof self&&self);export default{postMessage:worker.handleIncomingMessage,postToMain:worker.postToMain,ready:worker.ready};'],{type:"application/javascript"});var n=URL.createObjectURL(e);const o={workerType:"SHARED_WORKER",workerName:"Snub-Ws-Client-Worker",url:"ws://localhost:8080",replyTimeout:1e4};class t{constructor(e,n){this.worker=new SharedWorker(e,n),this.port=this.worker.port,this.port.start(),this.port.onmessage=e=>{"function"==typeof this.onmessage&&this.onmessage(e)},this.port.onerror=e=>{"function"==typeof this.onerror&&this.onerror(e)}}postMessage(e){this.port.postMessage(e)}terminate(){this.port.close()}}return class{#e=null;#n=null;#o=o;#t="init";#s=null;#r=new Map;#i=()=>{};#a=()=>{};#c=()=>{};constructor(e){var n;this.#o={...o,...e},this.#n=this.#l(),(n=this.#n)._postMessage=n.postMessage,n.postMessage=function(e){n._postMessage(JSON.stringify(e))},this.#n.onmessage=e=>{const[n,o]=JSON.parse(e.data);if("_internal:connected"===n&&(this.#n.postMessage(["_config",{url:this.#o.url}]),this.#t="READY",this.#s&&this.connect(this.#s),this.#s=null),"_internal:socket-disconnected"===n&&this.#c(o),"_internal:socket-connect"===n&&this.#a(o),!n.startsWith("_internal:"))if(n.startsWith("_r:")){const[e,t,s]=this.#r.get(n);e&&(e(o),this.#r.delete(n),clearTimeout(s))}else this.#i(n,o)}}send(e,n){this.#n.postMessage(["_send",[e,n]])}fetch(e,n){return new Promise(((o,t)=>{const s="_r:"+function(){let e=46656*Math.random()|0,n=46656*Math.random()|0;return e=("000"+e.toString(36)).slice(-3),n=("000"+n.toString(36)).slice(-3),e+n}(),r=setTimeout((()=>{t(new Error("Timeout")),this.#r.delete(s)}),this.#o.replyTimeout);this.#r.set(s,[o,t,r]),this.#n.postMessage(["_send",[e,n,s]])}))}connect(e){"READY"===this.#t?this.#n.postMessage(["_connect",e]):this.#s=e}close(e,n){this.#n.postMessage(["_close",[e,n]])}onopen(e){this.#a=e}onmessage(e){this.#i=e}onclose(e){this.#c=e}#l(){if("undefined"!=typeof SharedWorker&&!["WEB_WORKER","MAIN_THREAD"].includes(this.#o.workerType))try{const e=new t(n,{type:"module",name:this.#o.workerName});return this.#e="sharedWorker",e}catch(e){}if("undefined"!=typeof Worker&&!["MAIN_THREAD"].includes(this.#o.workerType))try{const e=new Worker(n,{type:"module",name:this.#o.workerName});return this.#e="webWorker",e}catch(e){}this.#e="mainThread";const e={postMessage:function(e){},onmessage:function(e){}};return import(n).then((n=>{e.postMessage=e=>{n.default.postMessage({data:JSON.stringify(e)})},e.postToMain=n.default.postToMain((n=>{e.onmessage(n)})),n.default.ready()})).catch((e=>{console.error("Failed to load worker script:",e)})),e}}}();
//# sourceMappingURL=snub-ws-client.min.js.map
