{"version":3,"file":"snub-ws-client.min.js","sources":["../src/worker.js","../src/index.js"],"sourcesContent":["const worker = (function (root) {\n  // Store connected ports in case this is a SharedWorker\n  const ports = [];\n  let currentSocket = null;\n\n  let postToMain = () => {};\n  let config = {};\n  // Check if we are in a Worker context or the main thread\n  const isWorkerContext =\n    typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope;\n  const isSharedWorkerContext =\n    typeof SharedWorkerGlobalScope !== 'undefined' &&\n    self instanceof SharedWorkerGlobalScope;\n\n  if (isSharedWorkerContext) {\n    // Running in a SharedWorker context\n    self.onconnect = function (e) {\n      const port = e.ports[0];\n      ports.push(port);\n\n      port.onmessage = handleIncomingMessage;\n      port.start();\n      postMessage(['_internal:connected']);\n    };\n  } else if (isWorkerContext) {\n    // Running in a Worker context\n    self.onmessage = handleIncomingMessage;\n    postMessage(['_internal:connected']);\n  }\n\n  return {\n    postToMain: (fn) => (postToMain = fn), // set the postMessage function for the main thread\n    handleIncomingMessage,\n    ready() {\n      postMessage(['_internal:connected']);\n    },\n  };\n\n  // Utility function to send a message in worker or main thread\n  function postMessage(msg) {\n    msg = JSON.stringify(msg);\n    if (isSharedWorkerContext) {\n      // Post message to all connected ports\n      ports.forEach((port) => port.postMessage(msg));\n    } else if (isWorkerContext) {\n      // Post message to the main script\n      self.postMessage(msg);\n    } else {\n      // Call the main thread handler\n      postToMain({ data: msg });\n    }\n  }\n\n  // Common functionality that runs in both the workers and main thread\n  function handleIncomingMessage(msg) {\n    const [event, payload] = JSON.parse(msg.data);\n    if (event === '_config') {\n      config = { ...config, ...payload };\n    }\n    if (event === '_connect') {\n      connectSocket(payload);\n    }\n    if (event === '_close') {\n      if (currentSocket) {\n        currentSocket.close(...payload);\n      }\n    }\n    if (event === '_send') {\n      if (currentSocket) {\n        currentSocket.send(JSON.stringify(payload));\n      }\n    }\n  }\n\n  async function connectSocket(auth) {\n    if (currentSocket) {\n      // close socket and wait for the socket to close asychronously\n      currentSocket.close();\n      await new Promise((resolve) => {\n        currentSocket.onclose = () => {\n          resolve();\n        };\n      });\n    }\n\n    currentSocket = new WebSocket(config.url);\n\n    currentSocket.onopen = () => {\n      currentSocket.send(JSON.stringify(['_auth', auth]));\n    };\n    currentSocket.onmessage = (event) => {\n      const [key, payload] = JSON.parse(event.data);\n      if (key === '_acceptAuth') {\n        return postMessage(['_internal:socket-connect', payload]);\n      }\n      return postMessage([key, payload]);\n    };\n    currentSocket.onclose = (event) => {\n      console.log(event);\n      // https://github.com/Luka967/websocket-close-codes\n      postMessage(['_internal:socket-disconnected', {\n        code: event.code,\n        reason: event.reason,\n      }]);\n      currentSocket = null;\n    };\n    currentSocket.onerror = (error) => {\n      console.error('Snub-Ws-Socket => Socket error:', error);\n    };\n  }\n})(typeof self !== 'undefined' ? self : this);\n\nexport default {\n  postMessage: worker.handleIncomingMessage,\n  postToMain: worker.postToMain,\n  ready: worker.ready,\n};\n","import workerScriptUrl from './worker.js'; // Will be a data URL if inlined\n\nconst DEFAULT_CONFIG = {\n  workerType: 'SHARED_WORKER', // 'SHARED_WORKER', 'WEB_WORKER', 'MAIN_THREAD'\n  workerName: 'Snub-Ws-Client-Worker',\n  url: 'ws://localhost:8080',\n  replyTimeout: 10000,\n};\nexport default class SnubWsClient {\n  #workerType = null;\n  #worker = null;\n  #config = DEFAULT_CONFIG;\n  #state = 'init';\n  #pendingConnect = null;\n  #waitingReplies = new Map();\n\n  // Event handlers\n  #onmessage = () => {};\n  #onopen = () => {};\n  #onclose = () => {};\n\n  constructor(config) {\n    this.#config = { ...DEFAULT_CONFIG, ...config };\n    // start the worker\n    this.#worker = this.#startWorker();\n    JSONifyWorker(this.#worker); // JSONify the worker\n    this.#worker.onmessage = (event) => {\n      const [key, value] = JSON.parse(event.data);\n      if (key === '_internal:connected') {\n        this.#worker.postMessage([\n          '_config',\n          {\n            url: this.#config.url,\n          },\n        ]);\n        this.#state = 'READY';\n        if (this.#pendingConnect) this.connect(this.#pendingConnect);\n        this.#pendingConnect = null;\n      }\n      if (key === '_internal:socket-disconnected') {\n        this.#onclose(value);\n      }\n      if (key === '_internal:socket-connect') {\n        this.#onopen(value);\n      }\n      if (key.startsWith('_internal:')) return;\n      if (key.startsWith('_r:')) {\n        const [resolve, reject, timeout] = this.#waitingReplies.get(key);\n        if (resolve) {\n          resolve(value);\n          this.#waitingReplies.delete(key);\n          clearTimeout(timeout);\n        }\n        return;\n      }\n      this.#onmessage(key, value);\n    };\n  }\n\n  send(event, payload) {\n    this.#worker.postMessage(['_send', [event, payload]]);\n  }\n  fetch(event, payload) {\n    return new Promise((resolve, reject) => {\n      const uid = '_r:' + generateUID();\n      const timeout = setTimeout(() => {\n        reject(new Error('Timeout'));\n        this.#waitingReplies.delete(uid);\n      }, this.#config.replyTimeout);\n      this.#waitingReplies.set(uid, [resolve, reject, timeout]);\n      this.#worker.postMessage(['_send', [event, payload, uid]]);\n    });\n  }\n\n  connect(auth) {\n    if (this.#state === 'READY') {\n      this.#worker.postMessage(['_connect', auth]);\n    } else {\n      this.#pendingConnect = auth;\n    }\n  }\n\n  close(code, reason) {\n    this.#worker.postMessage(['_close', [code, reason]]);\n  }\n\n  onopen(fn) {\n    this.#onopen = fn;\n  }\n  onmessage(fn) {\n    this.#onmessage = fn;\n  }\n\n  onclose(fn) {\n    this.#onclose = fn;\n  }\n\n  // Private functions\n  #startWorker() {\n    // Check if SharedWorker is supported\n    if (\n      typeof SharedWorker !== 'undefined' &&\n      !['WEB_WORKER', 'MAIN_THREAD'].includes(this.#config.workerType)\n    ) {\n      try {\n        const sharedWorker = new SharedWorkerWrapper(workerScriptUrl, {\n          type: 'module',\n          name: this.#config.workerName,\n        });\n        this.#workerType = 'sharedWorker';\n        return sharedWorker;\n      } catch (e) {}\n    }\n\n    // Check if Web Worker is supported\n    if (\n      typeof Worker !== 'undefined' &&\n      !['MAIN_THREAD'].includes(this.#config.workerType)\n    ) {\n      try {\n        const webWorker = new Worker(workerScriptUrl, {\n          type: 'module',\n          name: this.#config.workerName,\n        });\n        this.#workerType = 'webWorker';\n        return webWorker;\n      } catch (e) {}\n    }\n\n    // Fallback to running in the main thread\n    this.#workerType = 'mainThread';\n\n    const mainThreadWorker = {\n      postMessage: function (message) {},\n      onmessage: function (event) {},\n    };\n    // Load the worker script in the main thread\n    import(workerScriptUrl)\n      .then((module) => {\n        mainThreadWorker.postMessage = (msg) => {\n          module.default.postMessage({ data: JSON.stringify(msg) });\n        };\n        mainThreadWorker.postToMain = module.default.postToMain((msg) => {\n          mainThreadWorker.onmessage(msg);\n        });\n        module.default.ready();\n      })\n      .catch((error) => {\n        console.error('Failed to load worker script:', error);\n      });\n\n    return mainThreadWorker;\n  }\n}\n\nclass SharedWorkerWrapper {\n  constructor(url, options) {\n    this.worker = new SharedWorker(url, options); // Load SharedWorker\n    this.port = this.worker.port;\n\n    // Start the port for communication\n    this.port.start();\n\n    // Proxy the onmessage event\n    this.port.onmessage = (event) => {\n      if (typeof this.onmessage === 'function') {\n        this.onmessage(event); // Call the main thread's onmessage handler\n      }\n    };\n\n    // Optional: Proxy onerror handling\n    this.port.onerror = (error) => {\n      if (typeof this.onerror === 'function') {\n        this.onerror(error); // Call the main thread's onerror handler\n      }\n    };\n  }\n\n  postMessage(message) {\n    this.port.postMessage(message);\n  }\n\n  terminate() {\n    this.port.close(); // Close the port to stop communication\n  }\n}\n\nfunction JSONifyWorker(worker) {\n  worker._postMessage = worker.postMessage;\n  worker.postMessage = function (message) {\n    worker._postMessage(JSON.stringify(message));\n  };\n}\n\nfunction generateUID() {\n  let firstPart = (Math.random() * 46656) | 0;\n  let secondPart = (Math.random() * 46656) | 0;\n  firstPart = ('000' + firstPart.toString(36)).slice(-3);\n  secondPart = ('000' + secondPart.toString(36)).slice(-3);\n  return firstPart + secondPart;\n}\n"],"names":["blob","Blob","type","URL","createObjectURL","DEFAULT_CONFIG","workerType","workerName","url","replyTimeout","SharedWorkerWrapper","constructor","options","this","worker","SharedWorker","port","start","onmessage","event","onerror","error","postMessage","message","terminate","close","config","state","pendingConnect","waitingReplies","Map","onopen","onclose","startWorker","_postMessage","JSON","stringify","key","value","parse","data","connect","startsWith","resolve","reject","timeout","get","delete","clearTimeout","send","payload","fetch","Promise","uid","firstPart","Math","random","secondPart","toString","slice","generateUID","setTimeout","Error","set","auth","code","reason","fn","includes","sharedWorker","workerScriptUrl","name","e","Worker","webWorker","mainThreadWorker","import","then","module","msg","default","postToMain","ready","catch","console"],"mappings":"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"}